# -*- coding:utf-8 -*-
"""
数据结构进阶
线性表, 顺序表, 链表, 栈, 队列, 树

线性表:
     最基础,最广
     物理表现形式:顺序表,链表 (线性表两大分类)

     顺序表:将元素顺序的存放在一块,连续的存储区里
          表现形式: 基本布局 or 元素外置
          基本布局存储 -> 同类数据 (直接使用逻辑地址+偏移量)
          元素外置存储 -> 异类数据 (如何在连续的空间找到他?连续的存储空间存储逻辑地址,类似索引)

          结构
              基本属性(地址容量+元素个数) + 存储元素 --> 一体式  --> 基本布局   { 存储对象一旦存储确定无法改变 (变得话只能new一个容易浪费内存) }
              基本属性(地址容量+元素个数) + 存储地址  指向存储元素地址 --> 分离式  -->  元素外置  { 可以改变地址索引 }
                  分离式 --> 动态顺序表
                  扩充策略
                      线性增长 +4+4
                      倍数增长 容量X2 (空间换时间,空间廉价,✔)
                          更改,通常采用分离式(更节约内存)
                          保序增加(增头增尾,时间复杂度O(n),O(1))
                          非保序增加(随意位置乱插,工作基本不用O(1))
                          保序删除(掐头去尾,时间复杂度O(n),O(1))
                          非保序删除(随意位置乱删,工作基本不用O(1))
     链表:不连续的存储区,通过链接的方式构造起来的一系列的存储块中
          1. 单向链表 (只能通过1找到2,顺序查找)
                  基本元素: 结点
                  结点属性: 元素存储区域内容(item)+下一元素地址(next)
                  特性:
                      只要找到头结点,那么整个链表都能找全
                      尾结点中的 "下一地址" 为 空 None
                      保存单向链表只需保存头结点地址即可
                  场景:
                      最大限度的利用存储空间
                  python 链表
                      等号实质就是改变next属性地址
          2. 双向链表 (可以顺序查找1到6,也可以倒序查找6到1,但是不能从6找到1)
          3. 单向循环链表 (1,2,3,4,5,6,1...可以从6找到1)



"""